import { NextRequest, NextResponse } from 'next/server'
import MercadoPagoService from '@/services/mercadoPagoService'
import { BotService } from '@/services/botService'
import { WhatsAppService } from '@/services/whatsappService'
import { createClient } from '@supabase/supabase-js'
import crypto from 'crypto'

// Usar Service Role Key para bypasear RLS
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

const mercadoPagoService = new MercadoPagoService()
const botService = new BotService()
const whatsappService = new WhatsAppService()

// MercadoPago webhook verification
export async function GET(request: NextRequest) {
  // MercadoPago env√≠a un challenge para verificar el webhook
  const searchParams = request.nextUrl.searchParams
  const challenge = searchParams.get('challenge')
  
  if (challenge) {
    console.log('‚úÖ MercadoPago webhook verification challenge received')
    return new NextResponse(challenge)
  }
  
  return NextResponse.json({ status: 'MercadoPago webhook endpoint active' })
}

// MercadoPago webhook to receive payment notifications
export async function POST(request: NextRequest) {
  try {
    console.log('üîî MercadoPago webhook received')
    
    // Obtener el cuerpo de la request como texto
    const body = await request.text()
    
    console.log('üîç Webhook data:')
    console.log('Body:', body)
    console.log('Headers:', Object.fromEntries(request.headers.entries()))
    
    // Parsear el cuerpo 
    let webhookData
    try {
      webhookData = JSON.parse(body)
      console.log('üì± Parsed MercadoPago webhook:', JSON.stringify(webhookData, null, 2))
    } catch (parseError) {
      console.error('‚ùå Error parsing webhook body:', parseError)
      // Siempre responder 200 para evitar reintentos de MercadoPago
      return NextResponse.json({ error: 'Invalid JSON body', status: 'error' }, { status: 200 })
    }

    // Verificar que es una notificaci√≥n de pago
    if (webhookData.type === 'payment' || webhookData.action === 'payment.created') {
      const paymentId = webhookData.data?.id?.toString() || webhookData.id?.toString()
      
      if (!paymentId) {
        console.log('‚ùå No payment ID found in webhook data')
        return NextResponse.json({ error: 'No payment ID found', status: 'error' }, { status: 200 })
      }
      
      console.log(`üí≥ Processing payment notification: ${paymentId}`)
      
      try {
        // Buscar el pago en MercadoPago
        const paymentInfo = await mercadoPagoService.buscarPagoPorId(paymentId)
        
        if (!paymentInfo) {
          console.log(`‚ùå Payment not found in MercadoPago: ${paymentId}`)
          // Responder 200 para evitar reintentos de MercadoPago
          return NextResponse.json({ 
            status: 'payment not found', 
            message: 'Payment not found in MercadoPago API',
            payment_id: paymentId 
          }, { status: 200 })
        }

        console.log(`üí∞ Payment details:`)
        console.log(`   - ID: ${paymentInfo.id}`)
        console.log(`   - Status: ${paymentInfo.status}`)
        console.log(`   - Amount: $${paymentInfo.amount}`)
        console.log(`   - Description: ${paymentInfo.description}`)
        console.log(`   - External Reference: ${paymentInfo.external_reference}`)

        // Solo procesar pagos aprobados
        if (paymentInfo.status === 'approved') {
          console.log(`‚úÖ Payment approved, processing reservation...`)
          
          try {
            const result = await processApprovedPayment(paymentInfo)
            
            return NextResponse.json({ 
              status: 'success', 
              action: 'payment_processed',
              payment_id: paymentId,
              result: result
            }, { status: 200 })
            
          } catch (processError) {
            console.error('‚ùå Error in processApprovedPayment:', processError)
            return NextResponse.json({ 
              status: 'error_processing', 
              message: 'Error processing approved payment',
              payment_id: paymentId,
              error: processError.message
            }, { status: 200 })
          }
          
        } else {
          console.log(`‚è≥ Payment ${paymentId} status: ${paymentInfo.status} (not approved yet)`)
          return NextResponse.json({ 
            status: 'received', 
            message: `Payment status: ${paymentInfo.status}`,
            payment_id: paymentId 
          }, { status: 200 })
        }
        
      } catch (apiError) {
        console.error('‚ùå Error calling MercadoPago API:', apiError)
        return NextResponse.json({ 
          status: 'api_error', 
          message: 'Error calling MercadoPago API',
          payment_id: paymentId,
          error: apiError.message
        }, { status: 200 })
      }
      
    } else {
      console.log(`‚ÑπÔ∏è Received non-payment webhook: ${webhookData.type || webhookData.action}`)
      return NextResponse.json({ 
        status: 'ignored', 
        type: webhookData.type || webhookData.action 
      }, { status: 200 })
    }

  } catch (error: any) {
    console.error('‚ùå Critical webhook error:', error)
    console.error('Error stack:', error.stack)
    
    // IMPORTANTE: Siempre responder 200 para evitar reintentos de MercadoPago
    return NextResponse.json({ 
      status: 'critical_error',
      message: 'Internal server error',
      error: error.message
    }, { status: 200 })
  }
}
          
          return NextResponse.json({ 
            status: 'success', 
            action: 'payment_processed',
            payment_id: paymentId,
            result: result
          }, { status: 200 })
          
        } else {
          console.log(`‚è≥ Payment ${paymentId} status: ${paymentInfo.status} (not approved yet)`)
          return NextResponse.json({ 
            status: 'received', 
            message: `Payment status: ${paymentInfo.status}`,
            payment_id: paymentId 
          }, { status: 200 })
        }
        
      } catch (apiError) {
        console.error('‚ùå Error calling MercadoPago API:', apiError)
        return NextResponse.json({ 
          status: 'api_error', 
          message: 'Error calling MercadoPago API',
          payment_id: paymentId,
          error: (apiError as any).message
        }, { status: 200 })
      }
      
    } else {
      console.log(`‚ÑπÔ∏è Received non-payment webhook: ${webhookData.type || webhookData.action}`)
      return NextResponse.json({ 
        status: 'ignored', 
        type: webhookData.type || webhookData.action 
      }, { status: 200 })
    }

  } catch (error: any) {
    console.error('‚ùå Critical webhook error:', error)
    console.error('Error stack:', error.stack)
    
    // IMPORTANTE: Siempre responder 200 para evitar reintentos de MercadoPago
    return NextResponse.json({ 
      status: 'critical_error',
      message: 'Internal server error',
      error: error.message
    }, { status: 200 })
  }
}

// Funci√≥n para procesar pagos aprobados
async function processApprovedPayment(paymentInfo: any) {
  const customerPhone = paymentInfo.external_reference
  
  if (!customerPhone) {
    console.log(`‚ùå No external_reference found in payment`)
    return { status: 'no_reference' }
  }
  
  try {
    console.log(`üîç Processing payment for customer: ${customerPhone}`)
        
    // Buscar conversaci√≥n activa para este tel√©fono
    const { data: contexts } = await supabase
      .from('conversation_context')
      .select('*')
      .eq('customer_phone', customerPhone)
      .order('created_at', { ascending: false })
      .limit(5)

    console.log(`üîç Found ${contexts?.length || 0} pending reservations for phone ${customerPhone}`)

    if (contexts && contexts.length > 0) {
      // Buscar la reserva que coincida con el monto pagado
      const reservationAmount = paymentInfo.amount
      const expectedPeople = reservationAmount / 1 // $1 por persona
      
      const matchingContext = contexts.find(ctx => 
        ctx.reservation_people && 
        ctx.reservation_day && 
        ctx.customer_name &&
        parseInt(ctx.reservation_people.toString()) === expectedPeople
      ) || contexts[0] // Si no encuentra coincidencia exacta, toma la m√°s reciente
      
      console.log(`üéØ Matching reservation found:`)
      console.log(`   - Customer: ${matchingContext.customer_name}`)
      console.log(`   - Phone: ${matchingContext.customer_phone}`)
      console.log(`   - Day: ${matchingContext.reservation_day}`)
      console.log(`   - People: ${matchingContext.reservation_people}`)
      console.log(`   - Expected people from payment: ${expectedPeople}`)

      // Obtener informaci√≥n del negocio
      const { data: businessInfo } = await supabase
        .from('businesses')
        .select('*')
        .eq('id', matchingContext.business_id)
        .single()

      if (businessInfo) {
        console.log(`üè¢ Business info found: ${businessInfo.name}`)
        
        // Guardar la reserva directamente en la base de datos
        console.log(`üíæ Attempting to save reservation...`)
        
        // Preparar la fecha de reserva
        let reservationDate = new Date().toISOString() // fecha por defecto: hoy
        if (matchingContext.reservation_day && matchingContext.reservation_time) {
          // Si tenemos d√≠a y hora, crear fecha completa
          const dayMap: { [key: string]: number } = {
            'lunes': 1, 'martes': 2, 'mi√©rcoles': 3, 'jueves': 4, 'viernes': 5, 's√°bado': 6, 'domingo': 0
          }
          const today = new Date()
          const targetDay = dayMap[matchingContext.reservation_day.toLowerCase()]
          if (targetDay !== undefined) {
            const daysUntilTarget = (targetDay - today.getDay() + 7) % 7 || 7
            const targetDate = new Date(today.getTime() + daysUntilTarget * 24 * 60 * 60 * 1000)
            const [hours, minutes] = (matchingContext.reservation_time || '20:00').split(':')
            targetDate.setHours(parseInt(hours) || 20, parseInt(minutes) || 0, 0, 0)
            reservationDate = targetDate.toISOString()
          }
        }
        
        console.log(`üìÖ Reservation date calculated: ${reservationDate}`)
        
        const { data: reservation, error: reservationError } = await supabase
          .from('reservations')
          .insert({
            business_id: matchingContext.business_id,
            phone: matchingContext.customer_phone,
            customer_name: matchingContext.customer_name || 'Cliente',
            reservation_date: reservationDate,
            reservation_type: matchingContext.reservation_type || 'cena',
            party_size: matchingContext.reservation_people || 1,
            status: 'confirmed',
            deposit_paid: true,
            deposit_method: 'mercadopago',
            deposit_amount: paymentInfo.amount,
            created_at: new Date().toISOString()
          })
          .select()
          .single()

        if (reservationError) {
          console.error(`‚ùå Error saving reservation:`, reservationError)
          return { status: 'error', message: 'Failed to save reservation', error: reservationError }
        }

        if (reservation) {
          console.log(`‚úÖ Reservation saved automatically: ${reservation.id}`)
          
          // Limpiar el contexto
          console.log(`üßπ Cleaning conversation context...`)
          const { error: contextError } = await supabase
            .from('conversation_context')
            .delete()
            .eq('id', matchingContext.id)
          
          if (contextError) {
            console.error(`‚ùå Error cleaning context:`, contextError)
          } else {
            console.log(`‚úÖ Context cleaned successfully`)
          }

          // Formatear informaci√≥n del pago
          const formattedPaymentInfo = mercadoPagoService.formatearInfoPago(paymentInfo)
          console.log(`üìã Payment info formatted`)

          // Enviar confirmaci√≥n autom√°tica por WhatsApp
          const confirmationMessage = `üéâ **¬°PAGO RECIBIDO!** üéâ

‚úÖ **RESERVA CONFIRMADA AUTOM√ÅTICAMENTE** ‚úÖ

üìÖ **${matchingContext.reservation_day?.toUpperCase()}** ${matchingContext.reservation_time ? `a las ${matchingContext.reservation_time}` : ''}
üë• **${matchingContext.reservation_people} personas**
üçΩÔ∏è **Para ${matchingContext.reservation_type || 'cena'}**

${formattedPaymentInfo}
üì± A nombre de: ${matchingContext.customer_name}

¬°Tu pago fue detectado autom√°ticamente! 
Te esperamos en ${businessInfo.name}. üçª

¬°Gracias por elegirnos! üôå`

          console.log(`üì± Preparing to send WhatsApp confirmation to: ${matchingContext.customer_phone}`)
          
          // Enviar mensaje de confirmaci√≥n
          const phoneNumberId = process.env.WHATSAPP_PHONE_NUMBER_ID!
          try {
            const response = await fetch(`https://graph.facebook.com/v21.0/${phoneNumberId}/messages`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.WHATSAPP_ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                messaging_product: 'whatsapp',
                to: matchingContext.customer_phone,
                type: 'text',
                text: {
                  body: confirmationMessage
                }
              })
            })

            if (response.ok) {
              console.log(`‚úÖ Automatic confirmation sent to ${matchingContext.customer_phone}`)
              return { 
                status: 'success', 
                action: 'reservation_confirmed',
                customer: matchingContext.customer_phone,
                reservation_id: reservation.id
              }
            } else {
              console.error('Failed to send WhatsApp message:', await response.text())
              return { 
                status: 'partial_success', 
                action: 'reservation_saved_whatsapp_failed',
                reservation_id: reservation.id
              }
            }
          } catch (whatsappError) {
            console.error('Error sending WhatsApp message:', whatsappError)
            return { 
              status: 'partial_success', 
              action: 'reservation_saved_whatsapp_failed',
              reservation_id: reservation.id
            }
          }
        }
      }
    } else {
      console.log(`‚ö†Ô∏è No matching reservations found for payment amount: $${paymentInfo.amount}`)
      return { status: 'no_reservations_found' }
    }
    
    return { status: 'processed' }
      
  } catch (error: any) {
    console.error('‚ùå Error processing approved payment:', error)
    return { status: 'error', message: error.message }
  }
}
